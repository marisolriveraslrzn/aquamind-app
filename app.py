"""
AquaMind - App local en Streamlit para visualizar consumos y disponibilidad h√≠drica por regi√≥n.

Caracter√≠sticas:
- Subir archivos CSV
- Seleccionar regi√≥n
- Gr√°ficos comparativos (agua disponible vs agua potable)
- Calcular impacto h√≠drico estimado de un centro de datos:
    * Consumo promedio: 25.000.000 L/a√±o ‚âà 68.000 L/d√≠a
- Indicador visual de estr√©s h√≠drico
- Tabla con datos del CSV
- Modular y comentado para extender f√°cilmente
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import io
import xml.etree.ElementTree as ET
from typing import Optional, Tuple

# -----------------------
# Constantes y par√°metros
# -----------------------
CD_CONS_ANUAL_L = 25_000_000        # litros/a√±o (referencia)
CD_CONS_DIARIO_L = 68_000          # litros/d√≠a (aprox. redondeado)
# Umbrales de estr√©s h√≠drico (porcentaje del consumo del CD respecto al agua disponible)
STRESS_THRESHOLDS = {
    "Bajo": 5,       # <5% -> Bajo
    "Moderado": 15,  # 5-15% -> Moderado
    "Alto": 30,      # 15-30% -> Alto
    "Cr√≠tico": 100   # >30% -> Cr√≠tico (o uso mayoritario)
}

# -----------------------
# Funciones utilitarias
# -----------------------

def read_csv_bytes(uploaded_file) -> pd.DataFrame:
    """Lee un CSV subido (bytes) usando pandas. Detecta separador com√∫nmente usado."""
    try:
        uploaded_file.seek(0)
        # Intentar auto-detecci√≥n simple: si tiene ';' o ','.
        content = uploaded_file.read().decode('utf-8', errors='replace')
        # prueba separador
        sep = ',' if content.count(',') >= content.count(';') else ';'
        df = pd.read_csv(io.StringIO(content), sep=sep)
        return df
    except Exception as e:
        st.error(f"Error leyendo CSV: {e}")
        return pd.DataFrame()

def read_xml_bytes(uploaded_file) -> pd.DataFrame:
    """Si el usuario sube XML, intenta parsearlo con ElementTree y convertirlo a DataFrame.
    Se asume estructura simple <root><row><col1>..</col1>..</row>..</root>"""
    try:
        uploaded_file.seek(0)
        tree = ET.parse(io.BytesIO(uploaded_file.read()))
        root = tree.getroot()
        rows = []
        # tomar el primer nivel de hijos como filas
        for child in root:
            row = {}
            for elem in child:
                row[elem.tag] = elem.text
            rows.append(row)
        return pd.DataFrame(rows)
    except Exception as e:
        st.error(f"Error leyendo XML: {e}")
        return pd.DataFrame()

def detect_column_names(df: pd.DataFrame) -> Tuple[Optional[str], Optional[str], Optional[str]]:
    """Intenta detectar columnas de regi√≥n, agua disponible y agua potable (insensible a may√∫sculas).
       Devuelve (col_region, col_disponible, col_potable) o None si no encuentra."""
    lower_cols = {c.lower(): c for c in df.columns}
    # Posibles nombres
    region_keys = ['region', 'provincia', 'zona', 'departamento']
    disponible_keys = ['agua_disponible', 'disponible', 'reservas', 'reserva', 'agua_reservas', 'volumen_disponible']
    potable_keys = ['agua_potable', 'potable', 'potabilidad', 'potable_l', 'agua_tratable']
    def find_key(possible):
        for k in possible:
            if k in lower_cols:
                return lower_cols[k]
        # tambi√©n soportar cuando columna contiene la palabra
        for lk, orig in lower_cols.items():
            for k in possible:
                if k in lk:
                    return orig
        return None
    return find_key(region_keys), find_key(disponible_keys), find_key(potable_keys)

def normalize_liters(value) -> Optional[float]:
    """Convierte valores a float (litros). Si el valor parece estar en m3 (unidad en nombre), convertir fuera.
       Aqu√≠ asumimos que los datos ya est√°n en litros; si detectas 'm3' en una columna, ajustar afuera."""
    try:
        if pd.isna(value):
            return None
        # limpiar separadores de miles y comas decimales
        s = str(value).strip().replace('.', '').replace(',', '.')
        return float(s)
    except:
        return None

def compute_impact(row_value_available_l: float, cd_daily_l: float = CD_CONS_DIARIO_L) -> dict:
    """Calcula impacto del centro de datos en esa regi√≥n basado en agua disponible (litros).
       Retorna diccionario con porcentaje diario/anual y nivel de estr√©s."""
    result = {}
    if row_value_available_l is None or row_value_available_l <= 0:
        result.update({"pct_diario": None, "pct_anual": None, "stress_level": "Sin datos"})
        return result
    # porcentajes
    pct_diario = (cd_daily_l / row_value_available_l) * 100
    pct_anual = (CD_CONS_ANUAL_L / row_value_available_l) * 100
    # determinar nivel de estr√©s por umbrales (usar pct_anual o pct_diario seg√∫n preferencia)
    pct_for_threshold = pct_diario  # usamos diario para indicar impacto inmediato
    if pct_for_threshold < STRESS_THRESHOLDS["Bajo"]:
        level = "Bajo"
    elif pct_for_threshold < STRESS_THRESHOLDS["Moderado"]:
        level = "Moderado"
    elif pct_for_threshold < STRESS_THRESHOLDS["Alto"]:
        level = "Alto"
    else:
        level = "Cr√≠tico"
    result.update({
        "pct_diario": pct_diario,
        "pct_anual": pct_anual,
        "stress_level": level
    })
    return result

def plot_available_vs_potable(region_name: str, available_l: float, potable_l: float):
    """Grafico de barras simple comparando agua disponible vs potable"""
    labels = ['Agua disponible (L)', 'Agua potable (L)']
    values = [available_l if available_l is not None else 0,
              potable_l if potable_l is not None else 0]
    fig, ax = plt.subplots(figsize=(6,4))
    bars = ax.bar(labels, values)
    ax.set_title(f'Comparaci√≥n - {region_name}')
    ax.set_ylabel('Litros')
    # etiqueta de valores encima de las barras
    for bar in bars:
        height = bar.get_height()
        ax.annotate(f'{int(height):,}', xy=(bar.get_x()+bar.get_width()/2, height),
                    xytext=(0,3), textcoords="offset points", ha='center', va='bottom')
    plt.tight_layout()
    return fig

# -----------------------
# Interfaz Streamlit
# -----------------------

st.set_page_config(page_title="AquaMind - Impacto H√≠drico", layout="centered", page_icon="üíß")

st.title("AquaMind ‚Äî Visualizaci√≥n de consumo e impacto h√≠drico")
st.markdown("Carga archivos **CSV** con datos por regi√≥n. Interfaz en *espa√±ol*.")

# panel lateral con instrucciones y par√°metros
with st.sidebar:
    st.header("Instrucciones")
    st.write("""
    1. Sube uno o m√°s archivos CSV (o XML) con columnas que incluyan:
       - **region** (nombre de la regi√≥n / provincia)
       - **agua_disponible** (en litros preferiblemente)
       - **agua_potable** (en litros preferiblemente)
    2. Selecciona la regi√≥n desde el men√∫ desplegable.
    3. Usa los botones para ver gr√°ficos, tabla o calcular impacto del centro de datos.
    """)
    st.markdown("**Par√°metros del centro de datos**")
    # permitir al usuario ajustar el consumo del centro de datos si quisiera
    cd_anual_user = st.number_input("Consumo anual CD (litros)", value=CD_CONS_ANUAL_L, step=1_000_000, format="%d")
    cd_diario_user = st.number_input("Consumo diario CD (litros)", value=CD_CONS_DIARIO_L, step=1_000, format="%d")
    st.markdown("---")
    st.write("Colores/√≠conos: los botones tienen emojis para facilitar la lectura.")

# Carga de archivos
uploaded_files = st.file_uploader("Subir archivos (.csv o .xml)", type=['csv','xml'], accept_multiple_files=True)

if not uploaded_files:
    st.info("Sube al menos un archivo CSV para comenzar. Puedes usar los archivos de ejemplo proporcionados antes.")
    st.stop()

# Leemos y concatenamos dataframes
df_list = []
for f in uploaded_files:
    if f.name.lower().endswith('.xml'):
        df_tmp = read_xml_bytes(f)
    else:
        df_tmp = read_csv_bytes(f)
    if not df_tmp.empty:
        # a√±adir columna fuente para trazabilidad
        df_tmp['_source_file'] = f.name
        df_list.append(df_tmp)

if len(df_list) == 0:
    st.error("No se pudo leer ning√∫n archivo con datos v√°lidos.")
    st.stop()

df = pd.concat(df_list, ignore_index=True)

# Intentar detectar columnas principales
col_region, col_disponible, col_potable = detect_column_names(df)

if col_region is None:
    st.error("No se detect√≥ la columna de 'regi√≥n' en los archivos. Aseg√∫rate de que exista una columna llamada 'region', 'provincia' o similar.")
    st.write("Columnas encontradas:", list(df.columns))
    st.stop()

if col_disponible is None or col_potable is None:
    st.warning("No se detectaron autom√°ticamente columnas para 'agua disponible' o 'agua potable'. Revisa los nombres de columnas.")
    st.write("Columnas encontradas:", list(df.columns))
    # permitimos al usuario elegir manualmente las columnas si la detecci√≥n fall√≥
    cols = list(df.columns)
    col_disponible = st.selectbox("Seleccionar columna para 'Agua disponible'", cols, index=0)
    col_potable = st.selectbox("Seleccionar columna para 'Agua potable'", cols, index=min(1, len(cols)-1))

# Mostrar preview de datos
st.subheader("Vista previa de los datos cargados")
st.dataframe(df.head(50))

# Normalizamos valores num√©ricos de las columnas seleccionadas
df['_disp_l'] = df[col_disponible].apply(normalize_liters)
df['_pot_l'] = df[col_potable].apply(normalize_liters)
df['_region_norm'] = df[col_region].astype(str).str.strip()

# Crear lista de regiones ordenadas
regions = sorted(df['_region_norm'].unique())

# Selector de regi√≥n
region_sel = st.selectbox("Seleccionar regi√≥n", regions)

# Filtrar dataframe por regi√≥n seleccionada
df_region = df[df['_region_norm'] == region_sel].copy()

# Si hay m√∫ltiples filas por regi√≥n, agrupar sumando o tomando promedio seg√∫n sentido
# Suponemos que la columna representa reservas totales; agrupamos usando sum si tiene m√∫ltiples entradas
agg_available = df_region['_disp_l'].sum(skipna=True)
agg_potable = df_region['_pot_l'].sum(skipna=True)

st.markdown("---")
st.markdown(f"### Datos para: **{region_sel}**")
st.write(f"Archivos fuente: {', '.join(sorted(df_region['_source_file'].unique()))}")
st.write(f"Agua disponible (sumatoria): **{int(agg_available):,} L**" if agg_available>0 else "Agua disponible: sin datos")
st.write(f"Agua potable (sumatoria): **{int(agg_potable):,} L**" if agg_potable>0 else "Agua potable: sin datos")

# Botones para visualizar contenido
col1, col2, col3 = st.columns(3)
with col1:
    btn_ver_disponible = st.button("üíß Ver comparaci√≥n")
with col2:
    btn_ver_tabla = st.button("üìã Ver tabla")
with col3:
    btn_calcular_impacto = st.button("‚ö†Ô∏è Calcular impacto CD")

# Mostrar gr√°fico si pide
if btn_ver_disponible:
    st.subheader("Comparaci√≥n: agua disponible vs agua potable")
    fig = plot_available_vs_potable(region_sel, agg_available, agg_potable)
    st.pyplot(fig)

# Mostrar tabla
if btn_ver_tabla:
    st.subheader("Tabla de datos (filtrada por regi√≥n)")
    # presentar columnas relevantes y normalizadas
    display_cols = [col_region, col_disponible, col_potable, '_source_file']
    # Algunas pueden no existir si selecci√≥n manual
    # mostrar adem√°s las columnas normalizadas en litros
    df_show = df_region.copy()
    df_show = df_show.assign(Agua_disponible_L = df_show['_disp_l'],
                             Agua_potable_L = df_show['_pot_l'])
    st.dataframe(df_show[[col_region, 'Agua_disponible_L', 'Agua_potable_L', '_source_file']].fillna(""))

# Calcular impacto h√≠drico y mostrar indicador
if btn_calcular_impacto:
    st.subheader("Impacto h√≠drico estimado si se instala un centro de datos")
    # usar par√°metros del sidebar (puede ser modificado por el usuario)
    cd_anual = float(cd_anual_user)
    cd_diario = float(cd_diario_user)
    # Tomamos como referencia agua disponible agregada (podr√≠a cambiarse a promedio o a otra m√©trica)
    impact = compute_impact(agg_available, cd_daily_l=cd_diario)
    if impact['pct_diario'] is None:
        st.warning("No hay datos de agua disponible para calcular impacto.")
    else:
        st.metric("Consumo diario del CD (L)", f"{int(cd_diario):,}")
        st.write(f"- Porcentaje del consumo diario del CD respecto al agua disponible: **{impact['pct_diario']:.2f}%**")
        st.write(f"- Porcentaje anual estimado: **{impact['pct_anual']:.2f}%**")
        # Indicador visual: usar st.progress para mostrar el % (acotado a 100)
        pct_vis = min(impact['pct_diario'], 100) / 100.0
        st.progress(pct_vis)
        # Color/Texto del nivel de estr√©s
        level = impact['stress_level']
        if level == "Bajo":
            st.success(f"Nivel de estr√©s h√≠drico: {level} ‚úÖ")
        elif level == "Moderado":
            st.info(f"Nivel de estr√©s h√≠drico: {level} ‚ö†Ô∏è")
        elif level == "Alto":
            st.warning(f"Nivel de estr√©s h√≠drico: {level} ‚ö†Ô∏è‚ö†Ô∏è")
        else:
            st.error(f"Nivel de estr√©s h√≠drico: {level} üî•")
        # Mensaje interpretativo
        if impact['pct_diario'] < 5:
            st.write("Interpretaci√≥n: impacto local bajo. Sin embargo, considerar variaciones estacionales.")
        elif impact['pct_diario'] < 15:
            st.write("Interpretaci√≥n: impacto moderado ‚Äî conviene estudiar medidas de reutilizaci√≥n y ahorro.")
        elif impact['pct_diario'] < 30:
            st.write("Interpretaci√≥n: impacto alto ‚Äî necesaria planificaci√≥n de mitigaci√≥n y alternativas.")
        else:
            st.write("Interpretaci√≥n: impacto cr√≠tico ‚Äî no recomendado instalar sin estudio profundo y medidas de mitigaci√≥n.")

# -----------------------
# COMPARADOR DE TIPOS DE CENTROS DE DATOS
# -----------------------
st.markdown("---")
st.subheader("üè≠ Comparador de impacto por tipo de Centro de Datos")

# Cargar CSV de tipos de centros (si el usuario lo subi√≥)
tipos_file = st.file_uploader("Subir archivo con tipos de centros de datos", type=['csv'], key="tipos_cd")

if tipos_file:
    df_tipos = pd.read_csv(tipos_file, header=1)
    st.write("Vista previa de los tipos de CD:")
    st.dataframe(df_tipos)

    # -----------------------
    # NORMALIZACI√ìN Y DETECCI√ìN DE COLUMNAS
    # -----------------------
    df_tipos.columns = [c.strip().lower() for c in df_tipos.columns]
    st.write("Columnas detectadas en el archivo:", list(df_tipos.columns))

    # Buscar columnas por palabras clave
    def detectar_columna(df, posibles):
        for p in posibles:
            for c in df.columns:
                if p in c:
                    return c
        return None

    # Detecci√≥n seg√∫n tu estructura real
    col_tipo = detectar_columna(df_tipos, ['tipo'])
    col_consumo = detectar_columna(df_tipos, ['consumo anual', 'anual'])
    col_fuente = detectar_columna(df_tipos, ['fuente', 'ejemplo'])

    if not all([col_tipo, col_consumo]):
        st.error("‚ö†Ô∏è No se detectaron las columnas esperadas ('Tipo de Centro de Datos' y 'Consumo Anual Aproximado').")
        st.stop()

    # -----------------------
    # INTERFAZ DE COMPARACI√ìN
    # -----------------------
    tipos = sorted(df_tipos[col_tipo].dropna().unique())
    regiones_sel = st.multiselect("üåç Seleccionar regiones para comparar", regions, default=regions[:3])
    tipos_sel = st.multiselect("üè≠ Seleccionar tipos de Centro de Datos", tipos, default=tipos[:2])

    if st.button("üìä Comparar impacto"):
        comparacion = []

        for region in regiones_sel:
            agua_disp = df[df['_region_norm'] == region]['_disp_l'].sum()
            for tipo in tipos_sel:
                fila = df_tipos[df_tipos[col_tipo] == tipo].iloc[0]
                consumo_anual = fila[col_consumo]

                # Intentar convertir texto como ‚Äú3 ‚Äì 7 millones‚Äù o ‚Äú~342.000‚Äù a n√∫mero
                def convertir_a_num(valor):
                    if pd.isna(valor):
                        return None
                    texto = str(valor).replace('~', '').replace('.', '').replace(',', '').lower()
                    if 'mill' in texto:
                        # Si dice ‚Äú3 ‚Äì 7 millones‚Äù, tomar promedio
                        nums = [float(x) for x in texto.replace('millones', '').replace('mill√≥n', '').split('‚Äì') if x.strip().isdigit()]
                        if len(nums) == 2:
                            return sum(nums) / 2 * 1_000_000
                        elif len(nums) == 1:
                            return nums[0] * 1_000_000
                        else:
                            return None
                    # Si solo es n√∫mero
                    try:
                        return float(texto)
                    except:
                        return None

                consumo_real = convertir_a_num(consumo_anual)
                if not consumo_real:
                    continue

                pct_impacto = (consumo_real / agua_disp) * 100 if agua_disp > 0 else None

                comparacion.append({
                    "Regi√≥n": region,
                    "Tipo de CD": tipo,
                    "Agua disponible (L)": agua_disp,
                    "Consumo anual estimado (L)": consumo_real,
                    "Impacto (%)": pct_impacto,
                    "Fuente": fila[col_fuente] if col_fuente else ""
                })

        # -----------------------
        # RESULTADOS
        # -----------------------
        if comparacion:
            df_comp = pd.DataFrame(comparacion)

            st.subheader("üìã Tabla comparativa")
            st.dataframe(df_comp.style.format({
                "Agua disponible (L)": "{:,.0f}",
                "Consumo anual estimado (L)": "{:,.0f}",
                "Impacto (%)": "{:.2f}"
            }))

            # Gr√°fico de barras comparativas
            fig, ax = plt.subplots(figsize=(8,4))
            for tipo in tipos_sel:
                df_temp = df_comp[df_comp["Tipo de CD"] == tipo]
                ax.bar(df_temp["Regi√≥n"], df_temp["Impacto (%)"], label=tipo, alpha=0.7)
            ax.set_title("Impacto h√≠drico anual por tipo de Centro de Datos")
            ax.set_ylabel("Impacto (%) sobre agua disponible")
            ax.legend()
            st.pyplot(fig)

            # -----------------------
            # INTERPRETACI√ìN AUTOM√ÅTICA
            # -----------------------
            st.markdown("### üí¨ Interpretaci√≥n del impacto")
            for _, row in df_comp.iterrows():
                region = row["Regi√≥n"]
                tipo = row["Tipo de CD"]
                impacto = row["Impacto (%)"]
                if impacto < 1:
                    nivel = "muy bajo"
                elif impacto < 5:
                    nivel = "moderado"
                elif impacto < 15:
                    nivel = "alto"
                else:
                    nivel = "cr√≠tico"

                st.write(f"- En **{region}**, un centro de tipo **{tipo}** representar√≠a un impacto **{nivel}** ({impacto:.2f}% del agua disponible).")

        else:
            st.warning("No se pudieron calcular los impactos; revisa los valores de consumo en el archivo.")

else:
    st.info("üíæ Sub√≠ el archivo con los tipos de Centro de Datos (por ejemplo: 'refrigeraci√≥n - Hoja 1.csv') para habilitar la comparaci√≥n.")





# √Årea para exportar o simular (placeholder para futuras funcionalidades)
st.markdown("---")
st.subheader("Herramientas adicionales (futuro)")
st.write("Aqu√≠ se podr√°n a√±adir simulaciones, exportaci√≥n de resultados (CSV/PDF), escenarios con m√∫ltiples centros de datos, etc.")


# -----------------------
# Panel de herramientas futuras
# -----------------------
st.markdown("---")
st.subheader("üîß Herramientas adicionales (en desarrollo)")

st.markdown("""
üí° **AquaMind** evolucionar√° con nuevas funcionalidades que potenciar√°n el an√°lisis h√≠drico regional.  
Estas herramientas permitir√°n tomar decisiones basadas en datos reales, simulaciones y escenarios comparativos.
""")

# Crear una interfaz tipo ‚Äútarjetas‚Äù con tres columnas
col1, col2, col3 = st.columns(3)

with col1:
    st.markdown("### üìà Simulaciones h√≠dricas")

    st.write("Ajusta los par√°metros y observa c√≥mo var√≠a la disponibilidad de agua.")

    # Selecci√≥n de regi√≥n
    region_sim = st.selectbox("Seleccionar regi√≥n para simular", regions)

    # Par√°metros del escenario
    num_centros = st.slider("Cantidad de centros de datos", 0, 10, 1)
    cambio_lluvia = st.slider("Cambio clim√°tico (% de lluvia anual)", -50, 50, 0)
    ahorro_agua = st.slider("Eficiencia de uso o ahorro (%)", 0, 50, 10)

    if st.button("üîÆ Ejecutar simulaci√≥n"):
        df_sel = df[df['_region_norm'] == region_sim].iloc[0]
        agua_disp = df_sel['_disp_l']

        # C√°lculo de impacto
        consumo_cd_total = num_centros * CD_CONS_ANUAL_L
        ajuste_lluvia = 1 + (cambio_lluvia / 100)
        ahorro_factor = 1 - (ahorro_agua / 100)

        agua_final = (agua_disp * ajuste_lluvia - consumo_cd_total) * ahorro_factor
        variacion_pct = ((agua_final - agua_disp) / agua_disp) * 100

        st.metric("Variaci√≥n de agua disponible", f"{variacion_pct:.2f}%")
        st.write(f"**Agua disponible original:** {agua_disp:,.0f} L")
        st.write(f"**Agua simulada final:** {agua_final:,.0f} L")

        # Gr√°fico de comparaci√≥n
        fig, ax = plt.subplots()
        ax.bar(["Actual", "Simulado"], [agua_disp, max(0, agua_final)], color=["#1f77b4", "#2ca02c"])
        ax.set_ylabel("Litros disponibles")
        ax.set_title(f"Escenario simulado en {region_sim}")
        st.pyplot(fig)

with col2:
    st.markdown("### üíæ Exportaci√≥n de resultados")
    st.write("""
    Guarda los resultados y visualizaciones en:
    - Archivos **CSV** para an√°lisis externos  
    - Reportes **PDF** autom√°ticos con gr√°ficos  
    - Integraci√≥n con hojas de c√°lculo colaborativas  
    """)
    st.button("üì§ Exportar resultados (pr√≥ximamente)", disabled=True)

with col3:
    st.markdown("### üß† Escenarios de planificaci√≥n")
    st.write("""
    Compara el impacto de m√∫ltiples regiones:
    - Diferentes provincias o cuencas  
    - Capacidad de infraestructura h√≠drica  
    - Estr√©s h√≠drico promedio y total  
    """)
    st.button("üåç Comparar regiones (pr√≥ximamente)", disabled=True)

st.markdown("---")
st.info("üí¨ Sugerencia: puedes proponer nuevas herramientas para tu caso de estudio, como an√°lisis temporal, visualizaci√≥n 3D o conexi√≥n con bases de datos de recursos naturales.")

# Footer con cr√©ditos
st.markdown("---")
st.markdown("Desarrollado con ‚ù§Ô∏è por **AquaMind (prototipo)** ‚Äî C√≥digo modular y comentado. Puedes adaptar f√°cilmente columnas, umbrales y c√°lculos.")

